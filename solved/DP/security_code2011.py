"""
암호코드 다국어
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
2 초	128 MB	62422	12725	9414	20.722%
문제
상근이와 선영이가 다른 사람들이 남매간의 대화를 듣는 것을 방지하기 위해서 대화를 서로 암호화 하기로 했다. 그래서 다음과 같은 대화를 했다.

상근: 그냥 간단히 암호화 하자. A를 1이라고 하고, B는 2로, 그리고 Z는 26으로 하는거야.
선영: 그럼 안돼. 만약, "BEAN"을 암호화하면 25114가 나오는데, 이걸 다시 글자로 바꾸는 방법은 여러 가지가 있어.
상근: 그렇네. 25114를 다시 영어로 바꾸면, "BEAAD", "YAAD", "YAN", "YKD", "BEKD", "BEAN" 총 6가지가 나오는데, BEAN이 맞는 단어라는건 쉽게 알수 있잖아?
선영: 예가 적절하지 않았네 ㅠㅠ 만약 내가 500자리 글자를 암호화 했다고 해봐. 그 때는 나올 수 있는 해석이 정말 많은데, 그걸 언제 다해봐?
상근: 얼마나 많은데?
선영: 구해보자!
어떤 암호가 주어졌을 때, 그 암호의 해석이 몇 가지가 나올 수 있는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 5000자리 이하의 암호가 주어진다. 암호는 숫자로 이루어져 있다.

출력
나올 수 있는 해석의 가짓수를 구하시오. 정답이 매우 클 수 있으므로, 1000000으로 나눈 나머지를 출력한다.

암호가 잘 못되어 암호를 해석할 수 없는 경우에는 0을 출력한다.

예제 입력 1 
25114
예제 출력 1 
6
예제 입력 2 
1111111111
예제 출력 2 
89
---
0

0
---
10

1
---
80

0
---
80111111111

0
---
301111

0
---
11011

2
---
313031

0
"""

import sys
input = sys.stdin.readline

def sol():
    password = input().strip() # 1...5000
    # 1...26 (A-Z)  
    N = len(password)      
    dp = [0] * (N+1)
    
    # 공백이 password 일 떄.
    if not password:
        print(0)    
        return
        
    if int(password[0]) != 0:
        dp[1] = 1
    else:
        print(0)
        return
    
    if N == 1:        
        print(dp[1])
        return
    
    dp[0] = 1 # N = 2부터 적용시키기 위함.
    for i in range(2, N+1):            
        subint = int(password[i-2:i])
        has_zero = (subint % 10 == 0)
        if has_zero:
            if subint == 10 or subint == 20:
                dp[i] = dp[i-2]
            else: # wrong password
                print(0)
                return
        else:                    
            if 10 <= subint <= 26:
                dp[i] = (dp[i-1] + dp[i-2]) % 1000000 # 늘어나는 경우는 이것 뿐.
            else:
                dp[i] = dp[i-1]
    
    print(dp[N])

if __name__ == '__main__':
    sol()
    


